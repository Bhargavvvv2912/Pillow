name: Autonomous Dependency Updater for Pillow

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 */3 * *'

jobs:
  update-dependencies:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ${{ github.workspace }}

    steps:
      - name: Checkout Experiment Repository
        uses: actions/checkout@v4

      - name: Clone Pillow Repository
        run: git clone https://github.com/python-pillow/Pillow.git

      - name: Install System Dependencies for Pillow Build
        run: |
          sudo apt-get update
          sudo apt-get install -y libjpeg-dev zlib1g-dev libtiff5-dev liblcms2-dev libwebp-dev libfreetype6-dev

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install pip-tools and TOML Parser
        # These are the tools needed for our automated dependency resolution
        run: python -m pip install pip-tools toml

      # --- THIS IS THE FINAL, ARCHITECTURALLY CORRECT DEPENDENCY RESOLUTION STEP ---
      - name: Generate a Complete requirements.in and Compile
        id: generate-reqs
        run: |
          echo "Dynamically resolving Build, Core, and Test dependencies from pyproject.toml..."

          # This embedded Python script automates the discovery process.
          python -c "
          import toml
          from pathlib import Path

          # Define the target project directory
          project_dir = Path('./Pillow')
          toml_path = project_dir / 'pyproject.toml'

          print(f'Reading dependencies from {toml_path}')
          with open(toml_path, 'r') as f:
              data = toml.load(f)

          # 1. Get the Build System Dependencies (e.g., setuptools, pybind11)
          build_deps = data.get('build-system', {}).get('requires', [])
          print(f'Found {len(build_deps)} build-system dependencies.')

          # 2. Get the Core Project Dependencies (Pillow has none, but this makes it generic)
          core_deps = data.get('project', {}).get('dependencies', [])
          print(f'Found {len(core_deps)} core dependencies.')

          # 3. Get the Specific 'tests' Optional Dependencies (e.g., pytest)
          test_deps = data.get('project', {}).get('optional-dependencies', {}).get('tests', [])
          print(f'Found {len(test_deps)} test dependencies.')

          # --- Construct the requirements.in file ---
          with open('requirements.in', 'w') as f:
              # This line is crucial: it tells pip-compile to include the project itself.
              # This implicitly handles the core dependencies.
              f.write(f'-e ./{project_dir.name}\n')
              
              # Add the build-system and test dependencies
              for dep in build_deps + test_deps:
                  f.write(f'{dep}\n')
          "

          echo "--- Generated a complete temporary requirements.in file: ---"
          cat requirements.in
          echo "--------------------------------------------------------"
          
          # Now, compile this complete and explicit input file.
          pip-compile --resolver=backtracking --output-file generated-requirements.txt requirements.in

          echo "Generated the final, complete requirements.txt file for the agent."
          
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('generated-requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # The rest of the workflow is standard and correct
      - name: Install agent dependencies
        run: pip install google-generativeai pypi-simple packaging

      - name: Run the Autonomous Agent
        run: python dependency_agent.py
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      
      - name: Commit and push changes if any
        run: |
          git config --global user.name 'AURA Dependency Agent'
          git config --global user.email 'aura-agent@users.noreply.github.com'
          
          TARGET_FILE="generated-requirements.txt"
          git add $TARGET_FILE
          if git diff-index --quiet HEAD; then
            echo "No dependency changes to commit."
            exit 0
          fi
          
          echo "Dependencies have changed. Committing and pushing..."
          git commit -m "chore(deps): Autonomously manage Pillow dependencies [skip ci]"
          git push